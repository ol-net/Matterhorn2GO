<?xml version="1.0" encoding="utf-8"?>
<!-- 
The Matterhorn2Go Project
Copyright (C) 2011  University of OsnabrÃ¼ck; Part of the Opencast Matterhorn Project

This project is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 2.1 of the License, or (at your option) any later version.

This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301 
USA 
-->
<s:TabbedViewNavigatorApplication xmlns:fx="http://ns.adobe.com/mxml/2009" 
								  xmlns:s="library://ns.adobe.com/flex/spark" 
								  applicationComplete="onApplicationComplete(event)"
								  applicationDPI="160" 
								  backgroundColor="#861B1D" 
								  splashScreenImage="views.DynamicSplashScreen"
								  persistNavigatorState="true">
	
	<fx:Style source="views/skins/menustyle/css/global.css"/>
	
	<fx:Style>
		@namespace s "library://ns.adobe.com/flex/spark";     
		
		s|Application {
			backgroundColor: #861B1D;
		}
		
		s|TabbedViewNavigator { 
			skinClass: ClassReference("views.skins.view.TabbedViewNavigatorSkin"); 
		}
		
		s|ActionBar {
			chromeColor:#861B1D;
			defaultButtonAppearance: default;
			skinClass: ClassReference("views.skins.actionbar.CustomActionBarSkin");
		}
		
	</fx:Style>	
	
	<fx:Script> 
		<![CDATA[ 
			import business.auth.Auth;
			import business.auth.ConnectionChecker;
			import business.auth.dbaccess.SQLAuthViewHandler;
			import business.auth.events.AccessDeniedEvent;
			import business.auth.events.AccessOkEvent;
			import business.auth.events.AuthLoadedEvent;
			import business.datahandler.EpisodesDataHandler;
			import business.datahandler.SeriesDataHandler;
			import business.datahandler.URLClass;
			import business.dbaccess.SQLConnectionHandler;
			
			import business.core.events.ChangeTabToSeriesViewEvent;
			import business.core.events.ChangeTabViewEvent;
			
			import mx.events.FlexEvent;
			
			import spark.events.IndexChangeEvent;
			
			private var sqlSelectAuth:SQLAuthViewHandler
			
			protected function onApplicationComplete (event:FlexEvent):void
			{ 
				tabbedNavigator.addEventListener(ChangeTabViewEvent.CHANGETAB, onChange);
				tabbedNavigator.addEventListener(ChangeTabToSeriesViewEvent.CHANGETOSERIESTAB, changeToSeriesTab);
				
				var sqlConnection:SQLConnectionHandler = SQLConnectionHandler.getInstance();
				sqlConnection.initConnection();
				
				sqlSelectAuth = SQLAuthViewHandler.getInstance();
				sqlSelectAuth.addEventListener(AuthLoadedEvent.AUTHLOADED, handleLoader);
				sqlSelectAuth.initSQLAuth();
			} 
			
			protected function handleLoader(e:AuthLoadedEvent):void
			{
				var user:String = sqlSelectAuth.getUser();
				var pass:String = sqlSelectAuth.getPass();
				
				if((user != "" && pass != "") && (user != null && pass != null))
				{
					var conValue:String = sqlSelectAuth.getConValue();
					
					var conChecker:ConnectionChecker = ConnectionChecker.getInstance();
					conChecker.setAuthUSE(Boolean(conValue));
					
					var auth:Auth = Auth.getInstance();
					auth.addEventListener(AccessOkEvent.ACCESSOK, loadWithAccess);
					auth.addEventListener(AccessDeniedEvent.ACCESSDENIED, loadWithOutAccess);
					auth.login(URLClass.getInstance().getURLNoSearch(), user, pass);
				}
				else
				{
					//loadResults();
				}
			}
			
			protected function loadWithAccess(e:AccessOkEvent):void
			{
				//loadResults();
			}
			
			protected function loadWithOutAccess(e:AccessDeniedEvent):void
			{
				//loadResults();
			}
			
			protected function loadResults():void
			{					
				//var episode:EpisodesDataHandler = EpisodesDataHandler.getInstance();
				//episode.init();
				
				//var series:SeriesDataHandler = SeriesDataHandler.getInstance();
				//series.init();
				
				tabbedNavigator.addEventListener(ChangeTabViewEvent.CHANGETAB, onChange);
				tabbedNavigator.addEventListener(ChangeTabToSeriesViewEvent.CHANGETOSERIESTAB, changeToSeriesTab);
			
			}
			
			protected function onChange(event:ChangeTabViewEvent):void 
			{ 
				this.tabbedNavigator.selectedIndex = 1;
			} 
			
			protected function changeToSeriesTab(e:ChangeTabToSeriesViewEvent):void
			{
				this.tabbedNavigator.selectedIndex = 0;
			}
			
		]]> </fx:Script> 
	
	<s:navigators>
		<s:ViewNavigator id="vn1" 
						 backgroundColor="#F2F2F2"
						 label="Series" 
						 width="100%" 
						 height="100%" 
						 firstView="views.SeriesView"/> 
	
		<s:ViewNavigator label="Episodes"
						 backgroundColor="#F2F2F2"
						 width="100%" 
						 height="100%" 
						 firstView="views.EpisodeView"/> 
		
		<s:ViewNavigator label="History"
						 backgroundColor="#F2F2F2"
						 width="100%" 
						 height="100%" 
						 firstView="views.HistoryView"/> 
	</s:navigators>

</s:TabbedViewNavigatorApplication>
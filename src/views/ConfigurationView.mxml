<?xml version="1.0" encoding="utf-8"?>
<!--
The Matterhorn2Go Project
Copyright (C) 2011  University of OsnabrÃ¼ck; Part of the Opencast Matterhorn Project

This project is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 2.1 of the License, or (at your option) any later version.

This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301 
USA 
-->
<s:View xmlns:fx="http://ns.adobe.com/mxml/2009" 
		xmlns:s="library://ns.adobe.com/flex/spark" 
		title="Edit Custom URL" 
		xmlns:views="views.*"
		backgroundColor="#F2F2F2" 
		tabBarVisible="false"
		xmlns:business="business.*"
		creationComplete="init()">
	
	<fx:Script>
		<![CDATA[
			import business.core.ConfigurationReader;
			import business.auth.Auth;
			import business.auth.ConnectionChecker;
			import business.auth.dbaccess.SQLAuthEditHandler;
			import business.auth.events.AccessDeniedEvent;
			import business.auth.events.AccessOkEvent;
			import business.auth.events.AuthLoadedEvent;
			import business.datahandler.EpisodesDataHandler;
			import business.datahandler.SeriesDataHandler;
			import business.datahandler.URLClass;
			import business.datahandler.XMLHandler;
			import business.datahandler.CustomURLHandler;
			import business.dbaccess.SQLEditHandler;
			import business.dbaccess.SQLViewHandler;
			
			import business.core.events.FileReaderCompleteEvent;
			import business.dbaccess.events.SQLAdopterInsideEvent;
			
			import mx.collections.XMLListCollection;
			import mx.core.UIComponent;
			import mx.events.ResizeEvent;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			import mx.rpc.http.HTTPService;
			
			protected var myTimer:Timer;
			
			private var tit:TextField;
			
			private var titleComp:UIComponent;
			
			private var fontFamily:String = "_sans";
			
			private var fontSize:Number = 16;
			
			private var dH:EpisodesDataHandler;
			
			private var aUS:SQLViewHandler;
			
			private var url:CustomURLHandler;
			
			[Bindable]
			protected var height_num:Number = 0;
			
			[Bindable]
			protected var width_num:Number = 0;
			
			private var ok:Boolean = false; 
			
			private var id_adopter:String;
			private var url_adopter:String;
			private var name_adopter:String;
			
			private var cURL:String;
			
			private var serviceObj:HTTPService;
			private var adopterURL:String;
			
			// The initialisation function
			protected function init():void
			{
				infoText.text = "";
				
				ok = false;

				addText();
								
				height_num = navigator.height - 70;
				width_num = navigator.width - 10;
				
				var tmp:String = URLClass.getInstance().getURLNoSearch();
				
				var ado:Object = "<adopters>";
				ado = ado + data;
				ado = ado + "</adopters>";
				
				var xmlHandler:XMLHandler = new XMLHandler();
				
				id_adopter = xmlHandler.getResult("adopters/adopter[AdopterURL='"+tmp+"']/id", ado);
				url_adopter = xmlHandler.getResult("adopters/adopter[AdopterURL='"+tmp+"']/AdopterURL", ado);
				name_adopter = xmlHandler.getResult("adopters/adopter[AdopterURL='"+tmp+"']/AdopterName", ado);
				
				textinput_name.text = name_adopter;
				adopterURL = url_adopter;
				
				var tmp2:String = xmlHandler.getResult("adopters/adopter[AdopterURL='"+URLClass.getInstance().getURLNoSearch()+"']/ID", ado);
				
				if(tmp2!="")
				{
					textinput_url.editable = false;
					textinput_name.editable = false;
				}
				
				if(tmp != "http://lernfunk.de/plug-ins/lernfunk-matterhorn-search-proxy/proxy.py")
				{
					textinput_url.text = tmp;
				}
				
				this.navigator.addEventListener(ResizeEvent.RESIZE, setSize);
				
				this.addEventListener(KeyboardEvent.KEY_DOWN, handleButtons, false, 0, true);
				this.addEventListener(KeyboardEvent.KEY_UP, handleButtons, false, 0, true);
				//this.addEventListener("keyDown", handleButtons, false, 1);
				//this.addEventListener("keyUp", handleButtons, false, 1);
			}
			
			public function addText():void
			{
				tit = new TextField();
				tit.multiline = true;
				tit.wordWrap = true;
				tit.defaultTextFormat = new TextFormat(fontFamily, fontSize, null, null);
				tit.autoSize = "left";
				tit.width = this.navigator.width - 30;
				
				tit.text ="Depending on the video-encoding " +
					"and distribution type a Matterhorn " +
					"installation might work or not with " +
					"this app. We are sorry but we can not " +
					"offer any support for any server that " +
					"you might add here."
				
				titleComp = new UIComponent();
				titleComp.y=save_button.y + 35;
				titleComp.x=10;
				titleComp.addChild(tit);
				
				group.addElement(titleComp);
			}
			
			public function setSize(event:ResizeEvent):void
			{	
				titleComp.removeChild(tit);
				addText();
				height_num = this.navigator.height -70;
				width_num = this.navigator.width -10;
			}
			
			public function setURL(e:Event):void
			{
				save_button.setFocus();
				
				// verifying your url 
				if(!textinput_url.editable)
				{
					cURL = adopterURL;
				}
				else
				{
					cURL = textinput_url.text;
				}
				
				/*
				
				var pattern:RegExp = /http:\/\//i;
				
				if(pattern.test(cURL))
				{
					cURL = cURL.split(pattern)[1];
				}	  
				
				var pattern2:RegExp = /https:\/\//i;
				
				if(pattern2.test(cURL))
				{
					cURL = cURL.split(pattern2)[1];
				}	
				
				var pattern3:RegExp = /(\d+)/g;
				var re0:RegExp = /(\/\w*)/i;

				cURL = cURL.split(re0)[0];

				cURL = cURL.replace(pattern3, "$1");

				cURL = "http://"+cURL;
				// end of verifying
				
				*/
				
				// Check if the given URL has a valid protocol.
				// Users often omit them (stupid users).
				// If no protocol is given, we assume that we should use HTTP.
				var pattern:RegExp = /https{0,1}:\/\//i;
				
				if(!pattern.test(cURL))
				{
					cURL = "http://" + cURL;
				}
				// end of verifying
				

				serviceObj = new HTTPService();
				serviceObj.resultFormat = 'e4x';
				serviceObj.method = 'GET';
				serviceObj.useProxy = false;
				serviceObj.addEventListener(ResultEvent.RESULT, processResult);
				serviceObj.addEventListener(FaultEvent.FAULT, notConnected);
				serviceObj.url = cURL + "/search/episode.xml?limit=1";
				serviceObj.send();	
			}
			
			public function processResult(e:ResultEvent):void
			{
				aUS = SQLViewHandler.getInstance();
				aUS.addEventListener(SQLAdopterInsideEvent.SELECTCOMPLETE, setNewAdopter);
				
				aUS.checkAdopter(cURL);
			}	
			
			private var auth:Auth;
			private var eventTmp:SQLAdopterInsideEvent;
			
			public function setNewAdopter(e:SQLAdopterInsideEvent):void
			{
				this.eventTmp = e;
				
				if(useAuth.selected) 
				{
					auth = Auth.getInstance();
					auth.addEventListener(AccessDeniedEvent.ACCESSDENIED, authFailed);
					auth.addEventListener(AccessOkEvent.ACCESSOK, authOK);
					auth.login(cURL, String(textinput_user.text), String(textinput_pass.text));
				}
				else
				{
					updateAdopter(this.eventTmp);
				}
			}
			
			import business.auth.dbaccess.SQLAuthViewHandler;
			private var sqlSelectAuth:SQLAuthViewHandler;
			
			public function authOK(e:AccessOkEvent):void
			{
				auth.removeEventListener(AccessDeniedEvent.ACCESSDENIED, authFailed);
				auth.removeEventListener(AccessOkEvent.ACCESSOK, authOK);
				
				sqlSelectAuth = SQLAuthViewHandler.getInstance();
				sqlSelectAuth.addEventListener(AuthLoadedEvent.AUTHLOADED, handleLoader);
				sqlSelectAuth.initSQLAuth();
			}
			
			public function handleLoader(e:AuthLoadedEvent):void
			{
				sqlSelectAuth.removeEventListener(AuthLoadedEvent.AUTHLOADED, handleLoader);

				var insert:SQLAuthEditHandler = SQLAuthEditHandler.getInstance();
				
				var user:String = sqlSelectAuth.getUser();
				var pass:String = sqlSelectAuth.getPass();
				
				var conChecker:ConnectionChecker = ConnectionChecker.getInstance();

				if((user != "" && pass != "") && (user != null && pass != null))
				{
					conChecker.setAuthUSE(true);
					insert.updateAuth(cURL, String(textinput_user.text), String(textinput_pass.text), String(1)); 
				}
				else
				{
					conChecker.setAuthUSE(true);
					insert.insertAuth(cURL, String(textinput_user.text), String(textinput_pass.text), String(1)); 
				}
				
				updateAdopter(this.eventTmp);
			}
			
			public function authFailed(e:AccessDeniedEvent):void
			{
				auth.removeEventListener(AccessDeniedEvent.ACCESSDENIED, authFailed);
				auth.removeEventListener(AccessOkEvent.ACCESSOK, authOK);
				infoText.text = "auth failed!";
			}
			
			public function notConnected(e:FaultEvent):void
			{
				serviceObj.cancel();
				infoText.text = "your url is invalid!";
			}
			
			public function updateAdopter(e:SQLAdopterInsideEvent):void
			{
				if(!aUS.getAdopterInsideStatus() || (URLClass.getInstance().getURLNoSearch() == cURL))
				{
					var fileReader:ConfigurationReader = ConfigurationReader.getInstance();
					
					fileReader.setURL(cURL, true);
					
					dH = EpisodesDataHandler.getInstance();
					dH.setXMLListCollection(new XMLListCollection());
					dH.initLoadOK();
					dH.setOValue();
					
					var sDH:SeriesDataHandler = SeriesDataHandler.getInstance();
					sDH.setXMLSeries(null);
					sDH.initLoadOK();
					sDH.initThumbnailOK();
					sDH.setOValue();
					
					aUS.removeEventListener(SQLAdopterInsideEvent.SELECTCOMPLETE, setNewAdopter);
					
					this.navigator.removeEventListener(ResizeEvent.RESIZE, setSize);
					navigator.popView();
					
					var aU:SQLEditHandler = SQLEditHandler.getInstance();
					
					if(e == null) {
						url = CustomURLHandler.getInstance();
						url.setCustomURL(textinput_url.text);
						
						if(id_adopter != "")
						{
							aU.updateAdopter(id_adopter, textinput_name.text, cURL);
						}
						
						//navigator.popView();
					} 
					else
					{
						if(!ok) 
						{
							ok = true;
							url = CustomURLHandler.getInstance();
							url.setCustomURL(textinput_url.text);
							
							if(id_adopter != "")
							{
								aU.updateAdopter(id_adopter, textinput_name.text, cURL);
							}
						}
					}
				}
				else
				{
					infoText.text = "url already exists!";
				}
			}
			
			protected function popThisView():void
			{
				this.navigator.removeEventListener(ResizeEvent.RESIZE, setSize);
				this.removeEventListener(KeyboardEvent.KEY_DOWN, handleButtons);
				this.removeEventListener(KeyboardEvent.KEY_UP, handleButtons);
				navigator.popView();
			}
			
			// Event handler to handle hardware keyboard keys.
			protected function handleButtons(event:KeyboardEvent):void
			{				
				if(event.keyCode == 13)
				{
					setURL(event);
					stage.focus = null;
				}
			}
			
			public function loadLogin():void
			{
				if(!useAuth.selected)
				{
					user_text.visible = false;
					textinput_user.visible = false;
					pass_text.visible = false;
					textinput_pass.visible = false;
					infoText.y = 195;
					save_button.y = 215;
					titleComp.y=save_button.y + 35;
				}
				else
				{
					user_text.visible = true;
					textinput_user.visible = true;
					pass_text.visible = true;
					textinput_pass.visible = true;
					infoText.y = textinput_pass.y + 50;
					save_button.y = infoText.y + 20;
					titleComp.y=save_button.y + 35;
				}
			}
		]]>
	</fx:Script>
	<s:actionContent>
		
		<s:Button id="back_button" 
				  height="53"
				  width="60"
				  click="popThisView();">
			<s:icon>
				<s:MultiDPIBitmapSource source160dpi="assets/BackIcon40x40.png"
										source240dpi="assets/BackIcon64x64.png"
										source320dpi="assets/BackIcon88x88.png"/>
			</s:icon>
		</s:Button>
	</s:actionContent>
	
	<s:VGroup paddingTop="0"  paddingLeft="10">
		<s:Scroller width="{width_num}" height="{height_num}">
			<s:Group>
				<s:VGroup y="20">
					<s:Group id="group">
						
						<s:Label text="Name: " 
								 x="10" y="0"
								 fontWeight="bold" 
								 fontFamily="_sans"/>
						
						<s:TextInput id="textinput_name" 
									 skinClass="spark.skins.mobile.TextInputSkin" 
									 softKeyboardType="url"  
									 needsSoftKeyboard="true"
									 x="10" y="20"
									 enter="setURL(event);"
									 width="{navigator.width - 40}"/>
						
						<s:Label text="URL (example 'yourhost:port'): " 
								 x="10" y="70"
								 fontWeight="bold" 
								 fontFamily="_sans"/>

						<s:TextInput id="textinput_url" 
									 skinClass="spark.skins.mobile.TextInputSkin" 
									 softKeyboardType="url"  
									 needsSoftKeyboard="true"
									 x="10" y="90"
									 enter="setURL(event);"
									 width="{navigator.width - 40}"/>
						
						<s:CheckBox id="useAuth" 
									y="145" click="loadLogin()"
									x="{13}"/>
						
						<s:Label id="useAuthText" text="Use Authentication" 
								 fontWeight="bold" fontFamily="_sans"
								 y="155" 
								 x="{55}"/>
						
						<s:Label id="user_text" 
								 text="User: " visible="false"
								 x="10" y="195"
								 fontWeight="bold" 
								 fontFamily="_sans"/>
						
						<s:TextInput id="textinput_user" visible="false"
									 skinClass="spark.skins.mobile.TextInputSkin" 
									 softKeyboardType="url"  
									 needsSoftKeyboard="true"
									 x="10" y="215"
									 enter="setURL(event);"
									 width="{navigator.width - 40}"/>
						
						<s:Label id="pass_text" 
								 text="Password: " visible="false"
								 x="10" y="265"
								 fontWeight="bold" 
								 fontFamily="_sans"/>
						
						<s:TextInput id="textinput_pass" visible="false" displayAsPassword="true" 
									 skinClass="spark.skins.mobile.TextInputSkin" 
									 softKeyboardType="url"  
									 needsSoftKeyboard="true"
									 x="10" y="285"
									 enter="setURL(event);"
									 width="{navigator.width - 40}"/>
						
						<s:Label id="infoText" 
								 fontWeight="bold" 
								 color="#861B1D"
								 y="195" 
								 x="{navigator.width / 2 - 74}"/>
						
						<s:Button id="save_button" 
								  height="30" 
								  y="215"
								  x="{navigator.width / 2 - 74}"
								  label="add your URL"
								  click="setURL(null);"/>
						
						<s:Label id="tmp" 
								 y="{save_button.y + 120}"/>
					</s:Group>
				</s:VGroup>
			</s:Group>
		</s:Scroller>
	</s:VGroup> 
</s:View>